
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.nio.file.FileAlreadyExistsException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author burak
 */
public class ExtractorFrame extends javax.swing.JFrame {

    /**
     * Creates new form ExtractorFrame
     */
    private File selectedFiles[];
    public ExtractorFrame() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        chosenFiles_TF = new javax.swing.JTextField();
        gozat_JB = new javax.swing.JButton();
        degerleriAl_JB = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        dosyaMenu = new javax.swing.JMenu();
        cikis_MI = new javax.swing.JMenuItem();
        yardimMenu = new javax.swing.JMenu();
        nasilKullanilir_MI = new javax.swing.JMenuItem();
        hakkinda_MI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Value Extractor v0.0.1");
        setIconImage(getIconImage());
        setResizable(false);

        jLabel1.setText("Seçilen Dosyalar :");

        gozat_JB.setText("Gözat");
        gozat_JB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gozat_JBActionPerformed(evt);
            }
        });

        degerleriAl_JB.setText("Değerleri Al");
        degerleriAl_JB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degerleriAl_JBActionPerformed(evt);
            }
        });

        dosyaMenu.setText("Dosya");
        dosyaMenu.setToolTipText("");

        cikis_MI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        cikis_MI.setText("Çıkış");
        cikis_MI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cikis_MIActionPerformed(evt);
            }
        });
        dosyaMenu.add(cikis_MI);

        jMenuBar1.add(dosyaMenu);

        yardimMenu.setText("Yardım");

        nasilKullanilir_MI.setText("Nasıl kullanılır?");
        nasilKullanilir_MI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nasilKullanilir_MIActionPerformed(evt);
            }
        });
        yardimMenu.add(nasilKullanilir_MI);

        hakkinda_MI.setText("Hakkında");
        hakkinda_MI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hakkinda_MIActionPerformed(evt);
            }
        });
        yardimMenu.add(hakkinda_MI);

        jMenuBar1.add(yardimMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(degerleriAl_JB)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(chosenFiles_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gozat_JB)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gozat_JB, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chosenFiles_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(degerleriAl_JB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gozat_JBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gozat_JBActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Dosyasi (.txt)", "txt"));
        
        int result = fileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            String selectedFileNames = "";
            selectedFiles = fileChooser.getSelectedFiles();
            for(int i = 0; i < selectedFiles.length; i++) {
                selectedFileNames += selectedFiles[i].getName() + " ";
            }
            chosenFiles_TF.setText(selectedFileNames);
        }
    }//GEN-LAST:event_gozat_JBActionPerformed

    private void nasilKullanilir_MIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nasilKullanilir_MIActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "1. Gözat'a basarak istediğin dosyaları seç.\n"
                + "2. Değerleri Al'a basarak değerleri ayrı bir excel dosyasına yazdır.\n"
                + "\nHer bir dosya için ayrı bir excel dosyası oluşturulur.\n"
                + "Not: Spesifik text dosyaları üzerinde çalışır.","Nasıl kullanılır?",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_nasilKullanilir_MIActionPerformed

    private void hakkinda_MIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hakkinda_MIActionPerformed
        // TODO add your handling code here:
        openWebpage("http://blog.andreyuhai.com");
    }//GEN-LAST:event_hakkinda_MIActionPerformed

    private void cikis_MIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cikis_MIActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cikis_MIActionPerformed

    private void degerleriAl_JBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degerleriAl_JBActionPerformed
        // TODO add your handling code here:
        try{
            for(int i = 0; i < selectedFiles.length; i++) {
                ArrayList valuesList = readFileAsList(selectedFiles[i]);
                write_toExcel(valuesList, selectedFiles[i]);
            }
            JOptionPane.showMessageDialog(this,Integer.toString(selectedFiles.length)
                    +" dosya başarı ile aynı dizine yazıldı.", "Tamamlandı",JOptionPane.INFORMATION_MESSAGE);
            selectedFiles = null;
            chosenFiles_TF.setText("");
        }catch(NullPointerException e) {
            JOptionPane.showMessageDialog(this,"Herhangi bir dosya seçmediniz!", "Hata!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_degerleriAl_JBActionPerformed

    public static void openWebpage(String urlString) {
        try {
            Desktop.getDesktop().browse(new URL(urlString).toURI());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private ArrayList readFileAsList(File file) {
        boolean containsValue = false;
        BufferedReader reader = null;
        int lineCount = 0;
        ArrayList<String> valuesList = new ArrayList<String>();
        
        try {
            reader = new BufferedReader(new FileReader(file));
            String line = null;
            String values[];
            
            
            while ((line = reader.readLine()) != null) {
                lineCount++;
                if(line.toLowerCase().contains("value")) {
                    containsValue = true;
                    System.out.println("Found it on line"+ Integer.toString(lineCount));
                    continue;
                }
                
                
                if(containsValue) {
                    if(line.isEmpty()) {
                        containsValue = false;
                        break;
                    }
                    valuesList.add(line.split(";")[3].trim());
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
            }
        }
        return valuesList;
    }
    
    private void write_toExcel(ArrayList arrayList, File fileName) {
        
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("First Sheet");
        for(int i = 0; i < arrayList.size(); i++) {
            HSSFRow row = sheet.createRow(i);
            HSSFCell cell = row.createCell(0);
            cell.setCellValue(arrayList.get(i).toString());
        }
        
        try{
            workbook.write(new FileOutputStream(fileName.getCanonicalPath().replace(".txt", "-extracted.xls")));
            workbook.close();
        }catch(FileAlreadyExistsException e) {
            JOptionPane.showMessageDialog(this,"file already exists", "file",JOptionPane.INFORMATION_MESSAGE);
        }catch(IOException e){
            e.printStackTrace();
        }
        
    }
    
    public Image getIconImage() {
//        ImageIcon icon = new ImageIcon("images/icon3.png");
//        System.out.println(getClass().getClassLoader().getResource(".").toString());
        return Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/icon3.png"));
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField chosenFiles_TF;
    private javax.swing.JMenuItem cikis_MI;
    private javax.swing.JButton degerleriAl_JB;
    private javax.swing.JMenu dosyaMenu;
    private javax.swing.JButton gozat_JB;
    private javax.swing.JMenuItem hakkinda_MI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem nasilKullanilir_MI;
    private javax.swing.JMenu yardimMenu;
    // End of variables declaration//GEN-END:variables
}
